{
  "compilerOptions": {
    "outDir": "./dist/",
    "sourceMap": true,

    // Setting 'declaration: true' will generate 'd.ts' (declaration files?) files into the output directory.
    "declaration": true,

    // The "lib" configuration helps us write browser-compatible JavaScript code. This means our TypeScript code will
    // be verified against browser types like "Document".
    "lib": ["dom", "dom.iterable"],

    // While converting from JavaScript to TypeScript we can benefit from relaxing the type strictness. If the conversion
    // from JavaScript to TypeScript is not coupled with any refactoring, then we can lean on the existing code because
    // it's working code. If we were to restructure and refactor while converting from JavaScript to TypeScript, that's
    // a different proposition. The new code hasn't been tested/used yet and would benefit from the type strictness.
    "noImplicitAny": false,

    "module": "es6",
    "target": "es6",
    "allowJs": true,
    "allowSyntheticDefaultImports": true
  },

  // This is not the preferred way to incorporate TypeScript type definitions from a node_module, but this is the only
  // thing that I could get to work.
  //
  // I should be able to update set the 'typeRoots' configuration to something that includes DefinitelyTyped (i.e. '@types'
  // and my own types ('@dgroomes/chromium-types' and '@dgroomes/firefox-types') but I could not get it to work. Below
  // is the snippet I was trying.
  //    "typeRoots": [
  //      "../node_modules/@types",
  //      "../node_modules/@dgroomes/chromium-types",
  //      "../node_modules/@dgroomes/firefox-types"
  //    ],
  "include": [
    "../node_modules/@dgroomes/chromium-types/global.d.ts",
    "../node_modules/@dgroomes/firefox-types/global.d.ts",
  ]
}
