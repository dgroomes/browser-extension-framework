{
  "compilerOptions": {
    "outDir": "./transpiled/",
    "sourceMap": true,

    // Setting 'declaration: true' will generate 'd.ts' (declaration files?) files into the output directory.
    "declaration": true,

    // The "lib" configuration helps us write browser-compatible JavaScript code. This means our TypeScript code will
    // be verified against browser types like "Document".
    "lib": ["dom", "dom.iterable", "ES6"],

    "moduleResolution": "Node",

    // While converting from JavaScript to TypeScript we can benefit from relaxing the type strictness. If the conversion
    // from JavaScript to TypeScript is not coupled with any refactoring, then we can lean on the existing code because
    // it's working code. If we were to restructure and refactor while converting from JavaScript to TypeScript, that's
    // a different proposition. The new code hasn't been tested/used yet and would benefit from the type strictness.
    "noImplicitAny": false,

    "module": "es6",
    "target": "ES2021",
    "allowJs": true,
    "allowSyntheticDefaultImports": true,

    // Avoid the 'dependency hell' of type checking third-party software that disagrees with third-party software.
    //
    // Say again? In a typical npm project, there will exist multiple dependencies. If this project is a TypeScript project,
    // then there will exist a type-checking phase executed by the TypeScript compiler ('tsc'). While this could be a useful
    // thing in theory, it ends being a roadblock in practice. After all, toolchains like Java + Gradle/Maven don't compile
    // or type-check third-party .jar dependencies with each other. In fact, that doesnt' even make sense because the
    // source code has already been compiled to JVM bytecode. So, in an npm + TypeScript project, let's follow Java's
    // suit.
    //
    // See https://en.wikipedia.org/wiki/Dependency_hell
    // See https://stackoverflow.com/questions/59906323/typescript-skiplibcheck-still-checking-node-modules-libs
    "skipLibCheck": true
  },
  "include": ["src"]
}
